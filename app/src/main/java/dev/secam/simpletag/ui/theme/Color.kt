/*
 * Copyright (C) 2025  Sergio Camacho
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package dev.secam.simpletag.ui.theme

import androidx.compose.material3.ColorScheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.ui.graphics.Color
import dev.secam.simpletag.data.AppColorScheme

private val YellowLightColorScheme = lightColorScheme(
    primary = Color(0xFF705D0D),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFFCE186),
    onPrimaryContainer = Color(0xFF554500),
    secondary = Color(0xFF675E40),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFFF0E2BB),
    onSecondaryContainer = Color(0xFF4F462A),
    tertiary = Color(0xFF45664C),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFC6ECCC),
    onTertiaryContainer = Color(0xFF2D4E36),
    error = Color(0xFFBA1A1A),
    onError = Color(0xFFFFFFFF),
    errorContainer = Color(0xFFFFDAD6),
    onErrorContainer = Color(0xFF93000A),
    background = Color(0xFFFFF8EF),
    onBackground = Color(0xFF1E1B13),
    surface = Color(0xFFFFF8EF),
    onSurface = Color(0xFF1E1B13),
    surfaceVariant = Color(0xFFEAE2CF),
    onSurfaceVariant = Color(0xFF4B4639),
    outline = Color(0xFF7D7767),
    outlineVariant = Color(0xFFCEC6B4),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFF343027),
    inverseOnSurface = Color(0xFFF8F0E2),
    inversePrimary = Color(0xFFDFC56D),
    surfaceDim = Color(0xFFE0D9CC),
    surfaceBright = Color(0xFFFFF8EF),
    surfaceContainerLowest = Color(0xFFFFFFFF),
    surfaceContainerLow = Color(0xFFFAF3E5),
    surfaceContainer = Color(0xFFF5EDDF),
    surfaceContainerHigh = Color(0xFFEFE7DA),
    surfaceContainerHighest = Color(0xFFE9E2D4)
)
private val YellowDarkColorScheme = darkColorScheme(
    primary = Color(0xFFDFC56D),
    onPrimary = Color(0xFF3B2F00),
    primaryContainer = Color(0xFF554500),
    onPrimaryContainer = Color(0xFFFCE186),
    secondary = Color(0xFFD3C6A1),
    onSecondary = Color(0xFF383016),
    secondaryContainer = Color(0xFF4F462A),
    onSecondaryContainer = Color(0xFFF0E2BB),
    tertiary = Color(0xFFABD0B1),
    onTertiary = Color(0xFF173721),
    tertiaryContainer = Color(0xFF2D4E36),
    onTertiaryContainer = Color(0xFFC6ECCC),
    error = Color(0xFFFFB4AB),
    onError = Color(0xFF690005),
    errorContainer = Color(0xFF93000A),
    onErrorContainer = Color(0xFFFFDAD6),
    background = Color(0xFF16130B),
    onBackground = Color(0xFFE9E2D4),
    surface = Color(0xFF16130B),
    onSurface = Color(0xFFE9E2D4),
    surfaceVariant = Color(0xFF4B4639),
    onSurfaceVariant = Color(0xFFCEC6B4),
    outline = Color(0xFF979080),
    outlineVariant = Color(0xFF4B4639),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFFE9E2D4),
    inverseOnSurface = Color(0xFF343027),
    inversePrimary = Color(0xFF705D0D),
    surfaceDim = Color(0xFF16130B),
    surfaceBright = Color(0xFF3D392F),
    surfaceContainerLowest = Color(0xFF100E07),
    surfaceContainerLow = Color(0xFF1E1B13),
    surfaceContainer = Color(0xFF221F17),
    surfaceContainerHigh = Color(0xFF2D2A21),
    surfaceContainerHighest = Color(0xFF38342B)
)

private val RedLightColorScheme = lightColorScheme(
    primary = Color(0xFF904A44),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFFFDAD6),
    onPrimaryContainer = Color(0xFF73332E),
    secondary = Color(0xFF775653),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFFFFDAD6),
    onSecondaryContainer = Color(0xFF5D3F3C),
    tertiary = Color(0xFF715B2E),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFFEDFA6),
    onTertiaryContainer = Color(0xFF584419),
    error = Color(0xFFBA1A1A),
    onError = Color(0xFFFFFFFF),
    errorContainer = Color(0xFFFFDAD6),
    onErrorContainer = Color(0xFF93000A),
    background = Color(0xFFFFF8F7),
    onBackground = Color(0xFF231918),
    surface = Color(0xFFFFF8F7),
    onSurface = Color(0xFF231918),
    surfaceVariant = Color(0xFFF5DDDB),
    onSurfaceVariant = Color(0xFF534341),
    outline = Color(0xFF857371),
    outlineVariant = Color(0xFFD8C2BF),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFF392E2D),
    inverseOnSurface = Color(0xFFFFEDEA),
    inversePrimary = Color(0xFFFFB4AC),
    surfaceDim = Color(0xFFE8D6D4),
    surfaceBright = Color(0xFFFFF8F7),
    surfaceContainerLowest = Color(0xFFFFFFFF),
    surfaceContainerLow = Color(0xFFFFF0EF),
    surfaceContainer = Color(0xFFFCEAE8),
    surfaceContainerHigh = Color(0xFFF6E4E2),
    surfaceContainerHighest = Color(0xFFF1DEDC),
)
private val RedDarkColorScheme = darkColorScheme(
    primary = Color(0xFFFFB4AC),
    onPrimary = Color(0xFF561E1A),
    primaryContainer = Color(0xFF73332E),
    onPrimaryContainer = Color(0xFFFFDAD6),
    secondary = Color(0xFFE7BDB8),
    onSecondary = Color(0xFF442927),
    secondaryContainer = Color(0xFF5D3F3C),
    onSecondaryContainer = Color(0xFFFFDAD6),
    tertiary = Color(0xFFE0C38C),
    onTertiary = Color(0xFF3F2D04),
    tertiaryContainer = Color(0xFF584419),
    onTertiaryContainer = Color(0xFFFEDFA6),
    error = Color(0xFFFFB4AB),
    onError = Color(0xFF690005),
    errorContainer = Color(0xFF93000A),
    onErrorContainer = Color(0xFFFFDAD6),
    background = Color(0xFF1A1110),
    onBackground = Color(0xFFF1DEDC),
    surface = Color(0xFF1A1110),
    onSurface = Color(0xFFF1DEDC),
    surfaceVariant = Color(0xFF534341),
    onSurfaceVariant = Color(0xFFD8C2BF),
    outline = Color(0xFFA08C8A),
    outlineVariant = Color(0xFF534341),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFFF1DEDC),
    inverseOnSurface = Color(0xFF392E2D),
    inversePrimary = Color(0xFF904A44),
    surfaceDim = Color(0xFF1A1110),
    surfaceBright = Color(0xFF423735),
    surfaceContainerLowest = Color(0xFF140C0B),
    surfaceContainerLow = Color(0xFF231918),
    surfaceContainer = Color(0xFF271D1C),
    surfaceContainerHigh = Color(0xFF322826),
    surfaceContainerHighest = Color(0xFF3D3231),
)

private val OrangeLightColorScheme = lightColorScheme(
    primary = Color(0xFF8A5022),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFFFDCC6),
    onPrimaryContainer = Color(0xFF6D390C),
    secondary = Color(0xFF755845),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFFFFDCC6),
    onSecondaryContainer = Color(0xFF5B412F),
    tertiary = Color(0xFF5F6135),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFE4E6AE),
    onTertiaryContainer = Color(0xFF47491F),
    error = Color(0xFFBA1A1A),
    onError = Color(0xFFFFFFFF),
    errorContainer = Color(0xFFFFDAD6),
    onErrorContainer = Color(0xFF93000A),
    background = Color(0xFFFFF8F5),
    onBackground = Color(0xFF221A15),
    surface = Color(0xFFFFF8F5),
    onSurface = Color(0xFF221A15),
    surfaceVariant = Color(0xFFF3DED2),
    onSurfaceVariant = Color(0xFF52443B),
    outline = Color(0xFF84746A),
    outlineVariant = Color(0xFFD6C3B7),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFF382F29),
    inverseOnSurface = Color(0xFFFEEDE4),
    inversePrimary = Color(0xFFFFB784),
    surfaceDim = Color(0xFFE7D7CE),
    surfaceBright = Color(0xFFFFF8F5),
    surfaceContainerLowest = Color(0xFFFFFFFF),
    surfaceContainerLow = Color(0xFFFFF1EA),
    surfaceContainer = Color(0xFFFBEBE2),
    surfaceContainerHigh = Color(0xFFF6E5DC),
    surfaceContainerHighest = Color(0xFFF0DFD6),
)
private val OrangeDarkColorScheme = darkColorScheme(
    primary = Color(0xFFFFB784),
    onPrimary = Color(0xFF4F2500),
    primaryContainer = Color(0xFF6D390C),
    onPrimaryContainer = Color(0xFFFFDCC6),
    secondary = Color(0xFFE4BFA8),
    onSecondary = Color(0xFF422B1B),
    secondaryContainer = Color(0xFF5B412F),
    onSecondaryContainer = Color(0xFFFFDCC6),
    tertiary = Color(0xFFC8CA94),
    onTertiary = Color(0xFF30330B),
    tertiaryContainer = Color(0xFF47491F),
    onTertiaryContainer = Color(0xFFE4E6AE),
    error = Color(0xFFFFB4AB),
    onError = Color(0xFF690005),
    errorContainer = Color(0xFF93000A),
    onErrorContainer = Color(0xFFFFDAD6),
    background = Color(0xFF19120D),
    onBackground = Color(0xFFF0DFD6),
    surface = Color(0xFF19120D),
    onSurface = Color(0xFFF0DFD6),
    surfaceVariant = Color(0xFF52443B),
    onSurfaceVariant = Color(0xFFD6C3B7),
    outline = Color(0xFF9F8D83),
    outlineVariant = Color(0xFF52443B),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFFF0DFD6),
    inverseOnSurface = Color(0xFF382F29),
    inversePrimary = Color(0xFF8A5022),
    surfaceDim = Color(0xFF19120D),
    surfaceBright = Color(0xFF413731),
    surfaceContainerLowest = Color(0xFF140D08),
    surfaceContainerLow = Color(0xFF221A15),
    surfaceContainer = Color(0xFF261E18),
    surfaceContainerHigh = Color(0xFF312822),
    surfaceContainerHighest = Color(0xFF3C332D),
)

private val GreenLightColorScheme = lightColorScheme(
    primary = Color(0xFF3F6836),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFBFEFB1),
    onPrimaryContainer = Color(0xFF275021),
    secondary = Color(0xFF53634E),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFFD7E8CD),
    onSecondaryContainer = Color(0xFF3C4B37),
    tertiary = Color(0xFF386569),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFBCEBEF),
    onTertiaryContainer = Color(0xFF1E4D51),
    error = Color(0xFFBA1A1A),
    onError = Color(0xFFFFFFFF),
    errorContainer = Color(0xFFFFDAD6),
    onErrorContainer = Color(0xFF93000A),
    background = Color(0xFFF8FBF1),
    onBackground = Color(0xFF191D17),
    surface = Color(0xFFF8FBF1),
    onSurface = Color(0xFF191D17),
    surfaceVariant = Color(0xFFDFE4D8),
    onSurfaceVariant = Color(0xFF43483F),
    outline = Color(0xFF73796E),
    outlineVariant = Color(0xFFC3C8BC),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFF2E322B),
    inverseOnSurface = Color(0xFFEFF2E8),
    inversePrimary = Color(0xFFA4D396),
    surfaceDim = Color(0xFFD8DBD2),
    surfaceBright = Color(0xFFF8FBF1),
    surfaceContainerLowest = Color(0xFFFFFFFF),
    surfaceContainerLow = Color(0xFFF2F5EB),
    surfaceContainer = Color(0xFFECEFE5),
    surfaceContainerHigh = Color(0xFFE6E9E0),
    surfaceContainerHighest = Color(0xFFE1E4DA),
)
private val GreenDarkColorScheme = darkColorScheme(
    primary = Color(0xFFA4D396),
    onPrimary = Color(0xFF10380C),
    primaryContainer = Color(0xFF275021),
    onPrimaryContainer = Color(0xFFBFEFB1),
    secondary = Color(0xFFBBCBB2),
    onSecondary = Color(0xFF263422),
    secondaryContainer = Color(0xFF3C4B37),
    onSecondaryContainer = Color(0xFFD7E8CD),
    tertiary = Color(0xFFA0CFD2),
    onTertiary = Color(0xFF00373A),
    tertiaryContainer = Color(0xFF1E4D51),
    onTertiaryContainer = Color(0xFFBCEBEF),
    error = Color(0xFFFFB4AB),
    onError = Color(0xFF690005),
    errorContainer = Color(0xFF93000A),
    onErrorContainer = Color(0xFFFFDAD6),
    background = Color(0xFF11140F),
    onBackground = Color(0xFFE1E4DA),
    surface = Color(0xFF11140F),
    onSurface = Color(0xFFE1E4DA),
    surfaceVariant = Color(0xFF43483F),
    onSurfaceVariant = Color(0xFFC3C8BC),
    outline = Color(0xFF8D9387),
    outlineVariant = Color(0xFF43483F),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFFE1E4DA),
    inverseOnSurface = Color(0xFF2E322B),
    inversePrimary = Color(0xFF3F6836),
    surfaceDim = Color(0xFF11140F),
    surfaceBright = Color(0xFF363A34),
    surfaceContainerLowest = Color(0xFF0B0F0A),
    surfaceContainerLow = Color(0xFF191D17),
    surfaceContainer = Color(0xFF1D211B),
    surfaceContainerHigh = Color(0xFF272B25),
    surfaceContainerHighest = Color(0xFF32362F),
)

private val BlueLightColorScheme = lightColorScheme(
    primary = Color(0xFF415F91),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFD6E3FF),
    onPrimaryContainer = Color(0xFF284777),
    secondary = Color(0xFF565F71),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFFDAE2F9),
    onSecondaryContainer = Color(0xFF3E4759),
    tertiary = Color(0xFF705575),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFFAD8FD),
    onTertiaryContainer = Color(0xFF573E5C),
    error = Color(0xFFBA1A1A),
    onError = Color(0xFFFFFFFF),
    errorContainer = Color(0xFFFFDAD6),
    onErrorContainer = Color(0xFF93000A),
    background = Color(0xFFF9F9FF),
    onBackground = Color(0xFF191C20),
    surface = Color(0xFFF9F9FF),
    onSurface = Color(0xFF191C20),
    surfaceVariant = Color(0xFFE0E2EC),
    onSurfaceVariant = Color(0xFF44474E),
    outline = Color(0xFF74777F),
    outlineVariant = Color(0xFFC4C6D0),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFF2E3036),
    inverseOnSurface = Color(0xFFF0F0F7),
    inversePrimary = Color(0xFFAAC7FF),
    surfaceDim = Color(0xFFD9D9E0),
    surfaceBright = Color(0xFFF9F9FF),
    surfaceContainerLowest = Color(0xFFFFFFFF),
    surfaceContainerLow = Color(0xFFF3F3FA),
    surfaceContainer = Color(0xFFEDEDF4),
    surfaceContainerHigh = Color(0xFFE7E8EE),
    surfaceContainerHighest = Color(0xFFE2E2E9),
)
private val BlueDarkColorScheme = darkColorScheme(
    primary = Color(0xFFAAC7FF),
    onPrimary = Color(0xFF0A305F),
    primaryContainer = Color(0xFF284777),
    onPrimaryContainer = Color(0xFFD6E3FF),
    secondary = Color(0xFFBEC6DC),
    onSecondary = Color(0xFF283141),
    secondaryContainer = Color(0xFF3E4759),
    onSecondaryContainer = Color(0xFFDAE2F9),
    tertiary = Color(0xFFDDBCE0),
    onTertiary = Color(0xFF3F2844),
    tertiaryContainer = Color(0xFF573E5C),
    onTertiaryContainer = Color(0xFFFAD8FD),
    error = Color(0xFFFFB4AB),
    onError = Color(0xFF690005),
    errorContainer = Color(0xFF93000A),
    onErrorContainer = Color(0xFFFFDAD6),
    background = Color(0xFF111318),
    onBackground = Color(0xFFE2E2E9),
    surface = Color(0xFF111318),
    onSurface = Color(0xFFE2E2E9),
    surfaceVariant = Color(0xFF44474E),
    onSurfaceVariant = Color(0xFFC4C6D0),
    outline = Color(0xFF8E9099),
    outlineVariant = Color(0xFF44474E),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFFE2E2E9),
    inverseOnSurface = Color(0xFF2E3036),
    inversePrimary = Color(0xFF415F91),
    surfaceDim = Color(0xFF111318),
    surfaceBright = Color(0xFF37393E),
    surfaceContainerLowest = Color(0xFF0C0E13),
    surfaceContainerLow = Color(0xFF191C20),
    surfaceContainer = Color(0xFF1D2024),
    surfaceContainerHigh = Color(0xFF282A2F),
    surfaceContainerHighest = Color(0xFF33353A),

    )

private val PurpleLightColorScheme = lightColorScheme(
    primary = Color(0xFF6B538C),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFEDDCFF),
    onPrimaryContainer = Color(0xFF523C73),
    secondary = Color(0xFF645A70),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFFEBDDF7),
    onSecondaryContainer = Color(0xFF4C4357),
    tertiary = Color(0xFF7F525B),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFFFD9DF),
    onTertiaryContainer = Color(0xFF653B44),
    error = Color(0xFFBA1A1A),
    onError = Color(0xFFFFFFFF),
    errorContainer = Color(0xFFFFDAD6),
    onErrorContainer = Color(0xFF93000A),
    background = Color(0xFFFEF7FF),
    onBackground = Color(0xFF1D1A20),
    surface = Color(0xFFFEF7FF),
    onSurface = Color(0xFF1D1A20),
    surfaceVariant = Color(0xFFE8E0EB),
    onSurfaceVariant = Color(0xFF4A454E),
    outline = Color(0xFF7B757F),
    outlineVariant = Color(0xFFCCC4CF),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFF322F35),
    inverseOnSurface = Color(0xFFF6EEF6),
    inversePrimary = Color(0xFFD6BBFB),
    surfaceDim = Color(0xFFDFD8E0),
    surfaceBright = Color(0xFFFEF7FF),
    surfaceContainerLowest = Color(0xFFFFFFFF),
    surfaceContainerLow = Color(0xFFF9F1F9),
    surfaceContainer = Color(0xFFF3ECF4),
    surfaceContainerHigh = Color(0xFFEDE6EE),
    surfaceContainerHighest = Color(0xFFE7E0E8),
)
private val PurpleDarkColorScheme = darkColorScheme(
    primary = Color(0xFFD6BBFB),
    onPrimary = Color(0xFF3B255B),
    primaryContainer = Color(0xFF523C73),
    onPrimaryContainer = Color(0xFFEDDCFF),
    secondary = Color(0xFFCEC2DA),
    onSecondary = Color(0xFF352D40),
    secondaryContainer = Color(0xFF4C4357),
    onSecondaryContainer = Color(0xFFEBDDF7),
    tertiary = Color(0xFFF2B7C2),
    onTertiary = Color(0xFF4B252E),
    tertiaryContainer = Color(0xFF653B44),
    onTertiaryContainer = Color(0xFFFFD9DF),
    error = Color(0xFFFFB4AB),
    onError = Color(0xFF690005),
    errorContainer = Color(0xFF93000A),
    onErrorContainer = Color(0xFFFFDAD6),
    background = Color(0xFF151218),
    onBackground = Color(0xFFE7E0E8),
    surface = Color(0xFF151218),
    onSurface = Color(0xFFE7E0E8),
    surfaceVariant = Color(0xFF4A454E),
    onSurfaceVariant = Color(0xFFCCC4CF),
    outline = Color(0xFF958E99),
    outlineVariant = Color(0xFF4A454E),
    scrim = Color(0xFF000000),
    inverseSurface = Color(0xFFE7E0E8),
    inverseOnSurface = Color(0xFF322F35),
    inversePrimary = Color(0xFF6B538C),
    surfaceDim = Color(0xFF151218),
    surfaceBright = Color(0xFF3B383E),
    surfaceContainerLowest = Color(0xFF100D12),
    surfaceContainerLow = Color(0xFF1D1A20),
    surfaceContainer = Color(0xFF211E24),
    surfaceContainerHigh = Color(0xFF2C292F),
    surfaceContainerHighest = Color(0xFF37333A),
)


fun getColorScheme(appColorScheme: AppColorScheme, darkTheme: Boolean): ColorScheme {
    return when (appColorScheme) {
        AppColorScheme.Red -> if (darkTheme) RedDarkColorScheme else RedLightColorScheme
        AppColorScheme.Orange -> if (darkTheme) OrangeDarkColorScheme else OrangeLightColorScheme
        AppColorScheme.Yellow -> if (darkTheme) YellowDarkColorScheme else YellowLightColorScheme
        AppColorScheme.Green -> if (darkTheme) GreenDarkColorScheme else GreenLightColorScheme
        AppColorScheme.Blue -> if (darkTheme) BlueDarkColorScheme else BlueLightColorScheme
        AppColorScheme.Purple -> if (darkTheme) PurpleDarkColorScheme else PurpleLightColorScheme
        else -> if (darkTheme) RedDarkColorScheme else RedLightColorScheme
    }
}

fun blackThemeConvert(colorScheme: ColorScheme): ColorScheme {
    return darkColorScheme(
        primary = colorScheme.primary,
        onPrimary = colorScheme.onPrimary,
        primaryContainer = colorScheme.primaryContainer,
        onPrimaryContainer = colorScheme.onPrimaryContainer,
        inversePrimary = colorScheme.inversePrimary,
        secondary = colorScheme.secondary,
        onSecondary = colorScheme.onSecondary,
        secondaryContainer = colorScheme.secondaryContainer,
        onSecondaryContainer = colorScheme.onSecondaryContainer,
        tertiary = colorScheme.tertiary,
        onTertiary = colorScheme.onTertiary,
        tertiaryContainer = colorScheme.tertiaryContainer,
        onTertiaryContainer = colorScheme.onTertiaryContainer,
        background = Color.Black,
        onBackground = colorScheme.onBackground,
        surface = Color.Black,
        onSurface = colorScheme.onSurface,
        surfaceVariant = colorScheme.surfaceVariant,
        onSurfaceVariant = colorScheme.onSurfaceVariant,
        surfaceTint = colorScheme.primary,
        inverseSurface = colorScheme.inverseSurface,
        inverseOnSurface = colorScheme.inverseOnSurface,
        error = colorScheme.error,
        onError = colorScheme.onError,
        errorContainer = colorScheme.errorContainer,
        onErrorContainer = colorScheme.onErrorContainer,
        outline = colorScheme.outline,
        outlineVariant = colorScheme.outlineVariant,
        scrim = colorScheme.scrim,
        surfaceBright = colorScheme.surfaceBright,
        surfaceContainer = colorScheme.surfaceContainer,
        surfaceContainerHigh = colorScheme.surfaceContainerHigh,
        surfaceContainerHighest = colorScheme.surfaceContainerHighest,
        surfaceContainerLow = colorScheme.surfaceContainerLow,
        surfaceContainerLowest = colorScheme.surfaceContainerLowest,
        surfaceDim = colorScheme.surfaceDim,
        primaryFixed = colorScheme.primaryFixed,
        primaryFixedDim = colorScheme.primaryFixedDim,
        onPrimaryFixed = colorScheme.onPrimaryFixed,
        onPrimaryFixedVariant = colorScheme.onPrimaryFixedVariant,
        secondaryFixed = colorScheme.secondaryFixed,
        secondaryFixedDim = colorScheme.secondaryFixedDim,
        onSecondaryFixed = colorScheme.onSecondaryFixed,
        onSecondaryFixedVariant = colorScheme.onSecondaryFixed,
        tertiaryFixed = colorScheme.tertiaryFixed,
        tertiaryFixedDim = colorScheme.tertiaryFixedDim,
        onTertiaryFixed = colorScheme.onTertiaryFixed,
        onTertiaryFixedVariant = colorScheme.onTertiaryFixed
    )
}